import http from 'http';
import archiver from 'archiver';

const colorMappings = {
	"frame": "frame",
	"frame_inactive": "frameInactive",
	"frame_incognito": "frameIncognito",
	"frame_incognito_inactive": "frameIncognitoInactive",
	"background_tab": "backgroundTab",
	"background_tab_inactive": "backgroundTabInactive",
	"background_tab_incognito": "backgroundTabIncognito",
	"background_tab_incognito_inactive": "backgroundTabIncognitoInactive",
	"bookmark_text": "bookmarkText",
	"tab_background_text": "tabBackgroundText",
	"tab_background_text_inactive": "tabBackgroundTextInactive",
	"tab_background_text_incognito": "tabBackgroundTextIncognito",
	"tab_background_text_incognito_inactive": "tabBackgroundTextIncognitoInactive",
	"tab_text": "tabText",
	"toolbar": "toolbar",
	"toolbar_button_icon": "toolbarButtonIcon",
	"omnibox_text": "omniboxText",
	"omnibox_background": "omniboxBackground",
};

const generateThemeJSON = colors => {
	let themeColorsJSON = {};
	for (const jsonKey in colorMappings) {
		const colorsKey = colorMappings[jsonKey];
		themeColorsJSON = {
			...themeColorsJSON,
			[jsonKey]: hexToRGB(colors[colorsKey]),
		};
	}

	return {
		manifest_version: 2,
		name: "Chrome Theme Studio (chrometheme.studio) - Custom Theme",
		description: "This theme was generated by Chrome Theme Studio. Create your own custom Chrome Theme for free at chrometheme.studio.",
		version: "1.0",
		author: "Jamsheed Mistri (jmistri.com)",
		theme: {
			colors: themeColorsJSON
		}
	};
}

/* Credit: https://stackoverflow.com/questions/684672/how-do-i-loop-through-or-enumerate-a-javascript-object */
function hexToRGB(hex) {
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? [
		parseInt(result[1], 16),
		parseInt(result[2], 16),
		parseInt(result[3], 16),
	] : null;
}


export default function handler(req, res) {
	if (req.method != 'POST' || req.body == 'undefined') {
		res.statusCode = 400;
		res.end(JSON.stringify({
			error: "invalid request",
		}));
		return;
	}

	res.writeHead(200, {
		'Content-Type': 'application/zip',
		'Content-disposition': 'attachment; filename=chrome-theme.zip'
	});

	const themeJSON = generateThemeJSON(req.body);
	const zip = archiver('zip');
	zip.pipe(res);
	zip.append(JSON.stringify(themeJSON), {
		name: 'chrome-theme/manifest.json'
	}).finalize();
}
